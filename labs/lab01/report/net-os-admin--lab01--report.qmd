---
## Author
author:
  name: Мурашов Иван Вячеславович
  email: 1132236018@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчёт по лабораторной работе №1"
subtitle: "Администрирование сетевых подсистем"
license: "CC BY"

## Generic otions
lang: ru-RU
toc-title: "Содержание"

## Pdf output format
toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: true # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
---

# Цель работы

Целью данной работы является приобретение практических навыков установки Rocky Linux на виртуальную машину с помощью инструмента Vagrant.

# Задание

1. Сформируйте box-файл с дистрибутивом Rocky Linux для VirtualBox.

2. Запустите виртуальные машины сервера и клиента и убедитесь в их работоспособности.

3. Внесите изменения в настройки загрузки образов виртуальных машин server и client, добавив пользователя с правами администратора и изменив названия хостов (см. раздел 1.5.4).

4. Скопируйте необходимые для работы с Vagrant файлы и box-файлы виртуальных машин на внешний носитель. Используя эти файлы, вы можете попробовать развернуть виртуальные машины на другом компьютере.

# Выполнение лабораторной работы

## Подготовка и запуск виртуальных машин

Перед началом работы с Vagrant создаю каталог для проекта и размещаю необходимые файлы в директории packer и vagrant ([рис. @fig-001]).

![Каталог packer](image/1.png){#fig-001 width=70%}

Затем, поскольку я работаю на ОС Windows, используя FAR, перехожу в созданный мной рабочий каталог с проектом ([рис. @fig-002]).

![Менеджер FAR](image/2.png){#fig-002 width=70%}

В командной строке ввожу 

```cmd
packer.exe init vagrant-rocky.pkr.hcl
packer.exe build vagrant-rocky.pkr.hcl
```

для начала автоматической установки образа операционной системы Rocky Linux в VirtualBox и последующего формирования box-файла с дистрибутивом Rocky Linux для VirtualBox ([рис. @fig-003]).

![Установка образа Rocky Linux](image/3.png){#fig-003 width=70%}

![Установка образа Rocky Linux](image/5.png){#fig-005 width=70%}

По окончании процесса в рабочем каталоге видим box-файл с названием vagrant-virtualbox-rocky-9-x86_64.box ([рис. @fig-006]).

![Каталог packer](image/6.png){#fig-006 width=70%}

Для регистрации образа виртуальной машины в vagrant в командной строке ввожу 

```cmd
vagrant box add rocky9 vagrant-virtualbox-rocky-9-x86_64.box
```

![Регистрация образа Rocky Linux](image/7.png){#fig-007 width=70%}

Для запуска виртуальной машины Server ввожу в консоли

```cmd
vagrant up server
```

![Запуск vm-server](image/8.png){#fig-008 width=70%}

Для запуска виртуальной машины Client ввожу в консоли

```cmd
vagrant up client
```

Убеждаюсь, что запуск обеих виртуальных машин прошёл успешно и логинюсь под пользователем vagrant с паролем vagrant в графическом окружении ([рис. @fig-009]),  ([рис. @fig-011]).

![VM server и VM client](image/9.png){#fig-009 width=70%}

![VM server](image/11.png){#fig-011 width=70%}

Подключитесь к серверу из консоли:
```cmd
vagrant ssh server
```

![Подключение к серверу из консоли](image/10.png){#fig-010 width=70%}

Перехожу к пользователю ivmurashov ([рис. @fig-012]).

![Авторизация в терминале](image/12.png){#fig-012 width=70%}

Далее выхожу и выключаю обе виртуальные машины:

```cmd
vagrant halt server
vagrant halt client
```

##  Внесение изменений в настройки внутреннего окружения виртуальной машины

Для отработки созданных скриптов во время загрузки виртуальных машин убеждаюсь, что в конфигурационном файле Vagrantfile до строк с конфигурацией сервера имеется следующая запись ([рис. @fig-013]).

![Содержимое Vagrantfile](image/13.png){#fig-013 width=70%}

Зафиксируем внесённые изменения для внутренних настроек виртуальных машин, введя в терминале:

```cmd
vagrant up server --provision
vagrant up client --provision
```

Логинюсь на сервере и клиенте под созданным пользователем. Убеждаюсь, что в терминале приглашение отображается в виде ivmurashov@server.ivmurashov.net на сервере ([рис. @fig-014]).

![Терминал vm-server](image/14.png){#fig-014 width=70%}

Убеждаюсь, что в терминале клиента приглашение отображается в виде ivmurashov@client.ivmurashov.net ([рис. @fig-015]).

![Терминал vm-client](image/15.png){#fig-015 width=70%}

Затем, выключаю виртуальные машины.

## Ответы на контрольные вопросы

1. Для чего предназначен Vagrant?

Vagrant нужен для создания и управления средами виртуальных машин в одном рабочем процессе.
Этот инструмент, по сути, позволяет автоматизировать процесс установки на виртуальную машину как основного дистрибутива операционной системы, так и настройки необходимого в дальнейшем программного обеспечения.

2. Что такое box-файл? В чём назначение Vagrantfile?

Box-файл (или Vagrant Box) — это сохранённый образ виртуальной машины с развёрнутой в ней ОС; по сути, box-файл используется как основа для клонирования виртуальных машин с теми или иными настройками.

Vagrantfile — это конфигурационный файл, написанный на языке Ruby, в котором указаны настройки запуска виртуальной машины.

3. Приведите описание и примеры вызова основных команд Vagrant.

С Vagrant можно работать, используя следующие основные команды:
– vagrant help — вызов справки по командам Vagrant;
– vagrant box list — список подключённых к Vagrant box-файлов;
– vagrant box add — подключение box-файла к Vagrant;
– vagrant destroy — отключение box-файла от Vagrant и удаление его из виртуального
окружения;
– vagrant init — создание «шаблонного» конфигурационного файла
Vagrantfile для его последующего изменения;
– vagrant up — запуск виртуальной машины с использованием инструкций по запуску из конфигурационного файла Vagrantfile;
– vagrant reload — перезагрузка виртуальной машины;
– vagrant halt — остановка и выключение виртуальной машины;
– vagrant provision — настройка внутреннего окружения имеющейся виртуальной
машины (например, добавление новых инструкций (скриптов) в ранее созданную
виртуальную машину);
– vagrant ssh — подключение к виртуальной машине через ssh.

















